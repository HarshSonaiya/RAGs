Received file: LSTM.pdf and query: What are LSTMs ?
An error occurred while processing RAG pipeline: No GPU found. A GPU is needed for quantization.
Traceback (most recent call last):
  File "D:\Projects\RAGs\backend\server.py", line 25, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\generator.py", line 25, in process_rag_pipeline
    llm = create_pipeline(model_name, tokenizer)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 19, in create_pipeline
    model = load_quantized_model(model_name)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 12, in load_quantized_model
    model = AutoModelForCausalLM.from_pretrained(
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\models\auto\auto_factory.py", line 564, in from_pretrained
    return model_class.from_pretrained(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\modeling_utils.py", line 3398, in from_pretrained
    hf_quantizer.validate_environment(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\quantizers\quantizer_bnb_4bit.py", line 62, in validate_environment
    raise RuntimeError("No GPU found. A GPU is needed for quantization.")
RuntimeError: No GPU found. A GPU is needed for quantization.
Received file: LSTM.pdf and query: What are LSTMs?
An error occurred while processing RAG pipeline: Using `bitsandbytes` 4-bit quantization requires Accelerate: `pip install accelerate`
Traceback (most recent call last):
  File "D:\Projects\RAGs\backend\server.py", line 25, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\generator.py", line 25, in process_rag_pipeline
    llm = create_pipeline(model_name, tokenizer)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 19, in create_pipeline
    model = load_quantized_model(model_name)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 12, in load_quantized_model
    model = AutoModelForCausalLM.from_pretrained(
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\models\auto\auto_factory.py", line 564, in from_pretrained
    return model_class.from_pretrained(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\modeling_utils.py", line 3398, in from_pretrained
    hf_quantizer.validate_environment(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\quantizers\quantizer_bnb_4bit.py", line 64, in validate_environment
    raise ImportError("Using `bitsandbytes` 4-bit quantization requires Accelerate: `pip install accelerate`")
ImportError: Using `bitsandbytes` 4-bit quantization requires Accelerate: `pip install accelerate`
Received file: LSTM.pdf and query: What are LSTMs?

An error occurred while processing RAG pipeline: (MaxRetryError('HTTPSConnectionPool(host=\'cdn-lfs-us-1.huggingface.co\', port=443): Max retries exceeded with url: /repos/d9/3d/d93d0ae44e3930a5eb272129c6a12ccec827e219c3d5ba5474ae9ddf3b4b7647/d0ce3cc66d224a0e6014a1df6b7e56da29f5db52da1866ad0cc07d7583fb7c31?response-content-disposition=inline%3B+filename*%3DUTF-8%27%27model-00005-of-00008.safetensors%3B+filename%3D%22model-00005-of-00008.safetensors%22%3B&Expires=1725950991&Policy=eyJTdGF0ZW1lbnQiOlt7IkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTcyNTk1MDk5MX19LCJSZXNvdXJjZSI6Imh0dHBzOi8vY2RuLWxmcy11cy0xLmh1Z2dpbmdmYWNlLmNvL3JlcG9zL2Q5LzNkL2Q5M2QwYWU0NGUzOTMwYTVlYjI3MjEyOWM2YTEyY2NlYzgyN2UyMTljM2Q1YmE1NDc0YWU5ZGRmM2I0Yjc2NDcvZDBjZTNjYzY2ZDIyNGEwZTYwMTRhMWRmNmI3ZTU2ZGEyOWY1ZGI1MmRhMTg2NmFkMGNjMDdkNzU4M2ZiN2MzMT9yZXNwb25zZS1jb250ZW50LWRpc3Bvc2l0aW9uPSoifV19&Signature=FKpXqcQiknCpgRWp8ONmfba195Q-Hnp1wdFzbBYsDGd719lwii2NJYm2ECmzR0BDBxj7It3UtakKGBbxcDWYy-FLkuRg8rE7F-rTRVHfUONh5JWOyEnP9pHUbaddWMsXiowHcaUBojJfd49h~zxIkSakCpFIphIEFIdIYYuM8ch~FAdWLLrOS~tpjydLzV6maeAxiAnq5gYHDT4xCsLb3KbXolYUvuIox6HJ9iSdVfwb4kefQBGPDmhgMWzBOUBvaq4LQ~fNR0x7V~MR7D0A-0B5LXLiJw6PcS3-B8FUk4uglu-D4gbDtitn3WBviEdAGPCHMzrmrEznBq-3~oYn7w__&Key-Pair-Id=K24J24Z295AEI9 (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x000002C3B2A36A20>: Failed to resolve \'cdn-lfs-us-1.huggingface.co\' ([Errno 11001] getaddrinfo failed)"))'), '(Request ID: 36a08e1d-47c9-48eb-b863-95c129f8f3c4)')
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 712, in _error_catcher
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 812, in _raw_read
    data = self._fp_read(amt) if not fp_closed else b""
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 797, in _fp_read
    return self._fp.read(amt) if amt is not None else self._fp.read()
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\http\client.py", line 479, in read
    s = self.fp.read(amt)
        ^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\socket.py", line 707, in readinto
    return self._sock.recv_into(b)
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\ssl.py", line 1252, in recv_into
    return self.read(nbytes, buffer)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\ssl.py", line 1104, in read
    return self._sslobj.read(len, buffer)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TimeoutError: The read operation timed out

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\models.py", line 816, in generate
    yield from self.raw.stream(chunk_size, decode_content=True)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 934, in stream
    data = self.read(amt=amt, decode_content=decode_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 877, in read
    data = self._raw_read(amt)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 811, in _raw_read
    with self._error_catcher():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 717, in _error_catcher
    raise ReadTimeoutError(self._pool, None, "Read timed out.") from e  # type: ignore[arg-type]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='cdn-lfs-us-1.huggingface.co', port=443): Read timed out.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 549, in http_get
    for chunk in r.iter_content(chunk_size=DOWNLOAD_CHUNK_SIZE):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\models.py", line 822, in generate
    raise ConnectionError(e)
requests.exceptions.ConnectionError: HTTPSConnectionPool(host='cdn-lfs-us-1.huggingface.co', port=443): Read timed out.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connection.py", line 203, in _new_conn
    sock = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\util\connection.py", line 60, in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\socket.py", line 963, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 790, in urlopen
    response = self._make_request(
               ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 491, in _make_request
    raise new_e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 467, in _make_request
    self._validate_conn(conn)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 1096, in _validate_conn
    conn.connect()
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connection.py", line 611, in connect
    self.sock = sock = self._new_conn()
                       ^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connection.py", line 210, in _new_conn
    raise NameResolutionError(self.host, self, e) from e
urllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x000002C3B2A36A20>: Failed to resolve 'cdn-lfs-us-1.huggingface.co' ([Errno 11001] getaddrinfo failed)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 844, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\util\retry.py", line 515, in increment
    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='cdn-lfs-us-1.huggingface.co', port=443): Max retries exceeded with url: /repos/d9/3d/d93d0ae44e3930a5eb272129c6a12ccec827e219c3d5ba5474ae9ddf3b4b7647/d0ce3cc66d224a0e6014a1df6b7e56da29f5db52da1866ad0cc07d7583fb7c31?response-content-disposition=inline%3B+filename*%3DUTF-8%27%27model-00005-of-00008.safetensors%3B+filename%3D%22model-00005-of-00008.safetensors%22%3B&Expires=1725950991&Policy=eyJTdGF0ZW1lbnQiOlt7IkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTcyNTk1MDk5MX19LCJSZXNvdXJjZSI6Imh0dHBzOi8vY2RuLWxmcy11cy0xLmh1Z2dpbmdmYWNlLmNvL3JlcG9zL2Q5LzNkL2Q5M2QwYWU0NGUzOTMwYTVlYjI3MjEyOWM2YTEyY2NlYzgyN2UyMTljM2Q1YmE1NDc0YWU5ZGRmM2I0Yjc2NDcvZDBjZTNjYzY2ZDIyNGEwZTYwMTRhMWRmNmI3ZTU2ZGEyOWY1ZGI1MmRhMTg2NmFkMGNjMDdkNzU4M2ZiN2MzMT9yZXNwb25zZS1jb250ZW50LWRpc3Bvc2l0aW9uPSoifV19&Signature=FKpXqcQiknCpgRWp8ONmfba195Q-Hnp1wdFzbBYsDGd719lwii2NJYm2ECmzR0BDBxj7It3UtakKGBbxcDWYy-FLkuRg8rE7F-rTRVHfUONh5JWOyEnP9pHUbaddWMsXiowHcaUBojJfd49h~zxIkSakCpFIphIEFIdIYYuM8ch~FAdWLLrOS~tpjydLzV6maeAxiAnq5gYHDT4xCsLb3KbXolYUvuIox6HJ9iSdVfwb4kefQBGPDmhgMWzBOUBvaq4LQ~fNR0x7V~MR7D0A-0B5LXLiJw6PcS3-B8FUk4uglu-D4gbDtitn3WBviEdAGPCHMzrmrEznBq-3~oYn7w__&Key-Pair-Id=K24J24Z295AEI9 (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x000002C3B2A36A20>: Failed to resolve 'cdn-lfs-us-1.huggingface.co' ([Errno 11001] getaddrinfo failed)"))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAGs\backend\server.py", line 25, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\generator.py", line 25, in process_rag_pipeline
    llm = create_pipeline(model_name, tokenizer)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 19, in create_pipeline
    model = load_quantized_model(model_name)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 12, in load_quantized_model
    model = AutoModelForCausalLM.from_pretrained(
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\models\auto\auto_factory.py", line 564, in from_pretrained
    return model_class.from_pretrained(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\modeling_utils.py", line 3715, in from_pretrained
    resolved_archive_file, sharded_metadata = get_checkpoint_shard_files(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\utils\hub.py", line 1079, in get_checkpoint_shard_files
    cached_filename = cached_file(
                      ^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\utils\hub.py", line 402, in cached_file
    resolved_file = hf_hub_download(
                    ^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_deprecation.py", line 101, in inner_f
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_validators.py", line 114, in _inner_fn
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1240, in hf_hub_download
    return _hf_hub_download_to_cache_dir(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1389, in _hf_hub_download_to_cache_dir
    _download_to_tmp_and_move(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1915, in _download_to_tmp_and_move
    http_get(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 566, in http_get
    return http_get(
           ^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 463, in http_get
    r = _request_wrapper(
        ^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 399, in _request_wrapper
    response = get_session().request(method=method, url=url, **params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_http.py", line 66, in send
    return super().send(request, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: (MaxRetryError('HTTPSConnectionPool(host=\'cdn-lfs-us-1.huggingface.co\', port=443): Max retries exceeded with url: /repos/d9/3d/d93d0ae44e3930a5eb272129c6a12ccec827e219c3d5ba5474ae9ddf3b4b7647/d0ce3cc66d224a0e6014a1df6b7e56da29f5db52da1866ad0cc07d7583fb7c31?response-content-disposition=inline%3B+filename*%3DUTF-8%27%27model-00005-of-00008.safetensors%3B+filename%3D%22model-00005-of-00008.safetensors%22%3B&Expires=1725950991&Policy=eyJTdGF0ZW1lbnQiOlt7IkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTcyNTk1MDk5MX19LCJSZXNvdXJjZSI6Imh0dHBzOi8vY2RuLWxmcy11cy0xLmh1Z2dpbmdmYWNlLmNvL3JlcG9zL2Q5LzNkL2Q5M2QwYWU0NGUzOTMwYTVlYjI3MjEyOWM2YTEyY2NlYzgyN2UyMTljM2Q1YmE1NDc0YWU5ZGRmM2I0Yjc2NDcvZDBjZTNjYzY2ZDIyNGEwZTYwMTRhMWRmNmI3ZTU2ZGEyOWY1ZGI1MmRhMTg2NmFkMGNjMDdkNzU4M2ZiN2MzMT9yZXNwb25zZS1jb250ZW50LWRpc3Bvc2l0aW9uPSoifV19&Signature=FKpXqcQiknCpgRWp8ONmfba195Q-Hnp1wdFzbBYsDGd719lwii2NJYm2ECmzR0BDBxj7It3UtakKGBbxcDWYy-FLkuRg8rE7F-rTRVHfUONh5JWOyEnP9pHUbaddWMsXiowHcaUBojJfd49h~zxIkSakCpFIphIEFIdIYYuM8ch~FAdWLLrOS~tpjydLzV6maeAxiAnq5gYHDT4xCsLb3KbXolYUvuIox6HJ9iSdVfwb4kefQBGPDmhgMWzBOUBvaq4LQ~fNR0x7V~MR7D0A-0B5LXLiJw6PcS3-B8FUk4uglu-D4gbDtitn3WBviEdAGPCHMzrmrEznBq-3~oYn7w__&Key-Pair-Id=K24J24Z295AEI9 (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x000002C3B2A36A20>: Failed to resolve \'cdn-lfs-us-1.huggingface.co\' ([Errno 11001] getaddrinfo failed)"))'), '(Request ID: 36a08e1d-47c9-48eb-b863-95c129f8f3c4)')
Received file: LSTM.pdf and query: What are LSTMs?

An error occurred while processing RAG pipeline: (MaxRetryError('HTTPSConnectionPool(host=\'cdn-lfs-us-1.huggingface.co\', port=443): Max retries exceeded with url: /repos/d9/3d/d93d0ae44e3930a5eb272129c6a12ccec827e219c3d5ba5474ae9ddf3b4b7647/b0e0a3c0b992925ff9a60f1234950af0bcc7ce3015c8a386a342489e76f5d09c?response-content-disposition=inline%3B+filename*%3DUTF-8%27%27model-00007-of-00008.safetensors%3B+filename%3D%22model-00007-of-00008.safetensors%22%3B&Expires=1725951476&Policy=eyJTdGF0ZW1lbnQiOlt7IkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTcyNTk1MTQ3Nn19LCJSZXNvdXJjZSI6Imh0dHBzOi8vY2RuLWxmcy11cy0xLmh1Z2dpbmdmYWNlLmNvL3JlcG9zL2Q5LzNkL2Q5M2QwYWU0NGUzOTMwYTVlYjI3MjEyOWM2YTEyY2NlYzgyN2UyMTljM2Q1YmE1NDc0YWU5ZGRmM2I0Yjc2NDcvYjBlMGEzYzBiOTkyOTI1ZmY5YTYwZjEyMzQ5NTBhZjBiY2M3Y2UzMDE1YzhhMzg2YTM0MjQ4OWU3NmY1ZDA5Yz9yZXNwb25zZS1jb250ZW50LWRpc3Bvc2l0aW9uPSoifV19&Signature=iwkQzEgFw2lAUuKVeX0VEy6Yk4Au-xWA-ygEA~dMq9fCEB0~dgmfMRT~R0ZFemCGx-8ux8hQQh3jQ3dmXmXCzfKpHIlspBGGn4vjO9Z4noA8iDG-2cjE~ZgEL98jZJcS3jffM3jWgIJbh4TXGxoMiJd7AHvql3YbH1RUNDnaw7O8z2SumazfjX77wu6UlIdikvhpv14GMzfq3jJs~ThHO86Vg1fYHFYkj9WYXOGcRw3XrS5wCm1qOD7aw6YRt0h6ShBLCat8DLBVeKick02DwGgGm4toZZzUCaH4XzliDBNiHAYFYMinTq7dKV1zVbcwGG9bFOw8dXd9G6-kq2YvDw__&Key-Pair-Id=K24J24Z295AEI9 (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x000002C3B2519070>: Failed to resolve \'cdn-lfs-us-1.huggingface.co\' ([Errno 11001] getaddrinfo failed)"))'), '(Request ID: 23b1965e-b27c-4d78-bf7d-136857c23dd4)')
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 712, in _error_catcher
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 812, in _raw_read
    data = self._fp_read(amt) if not fp_closed else b""
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 797, in _fp_read
    return self._fp.read(amt) if amt is not None else self._fp.read()
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\http\client.py", line 479, in read
    s = self.fp.read(amt)
        ^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\socket.py", line 707, in readinto
    return self._sock.recv_into(b)
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\ssl.py", line 1252, in recv_into
    return self.read(nbytes, buffer)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\ssl.py", line 1104, in read
    return self._sslobj.read(len, buffer)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TimeoutError: The read operation timed out

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\models.py", line 816, in generate
    yield from self.raw.stream(chunk_size, decode_content=True)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 934, in stream
    data = self.read(amt=amt, decode_content=decode_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 877, in read
    data = self._raw_read(amt)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 811, in _raw_read
    with self._error_catcher():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 717, in _error_catcher
    raise ReadTimeoutError(self._pool, None, "Read timed out.") from e  # type: ignore[arg-type]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='cdn-lfs-us-1.huggingface.co', port=443): Read timed out.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 549, in http_get
    for chunk in r.iter_content(chunk_size=DOWNLOAD_CHUNK_SIZE):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\models.py", line 822, in generate
    raise ConnectionError(e)
requests.exceptions.ConnectionError: HTTPSConnectionPool(host='cdn-lfs-us-1.huggingface.co', port=443): Read timed out.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connection.py", line 203, in _new_conn
    sock = connection.create_connection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\util\connection.py", line 60, in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\socket.py", line 963, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
socket.gaierror: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 790, in urlopen
    response = self._make_request(
               ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 491, in _make_request
    raise new_e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 467, in _make_request
    self._validate_conn(conn)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 1096, in _validate_conn
    conn.connect()
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connection.py", line 611, in connect
    self.sock = sock = self._new_conn()
                       ^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connection.py", line 210, in _new_conn
    raise NameResolutionError(self.host, self, e) from e
urllib3.exceptions.NameResolutionError: <urllib3.connection.HTTPSConnection object at 0x000002C3B2519070>: Failed to resolve 'cdn-lfs-us-1.huggingface.co' ([Errno 11001] getaddrinfo failed)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\adapters.py", line 486, in send
    resp = conn.urlopen(
           ^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\connectionpool.py", line 844, in urlopen
    retries = retries.increment(
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\util\retry.py", line 515, in increment
    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='cdn-lfs-us-1.huggingface.co', port=443): Max retries exceeded with url: /repos/d9/3d/d93d0ae44e3930a5eb272129c6a12ccec827e219c3d5ba5474ae9ddf3b4b7647/b0e0a3c0b992925ff9a60f1234950af0bcc7ce3015c8a386a342489e76f5d09c?response-content-disposition=inline%3B+filename*%3DUTF-8%27%27model-00007-of-00008.safetensors%3B+filename%3D%22model-00007-of-00008.safetensors%22%3B&Expires=1725951476&Policy=eyJTdGF0ZW1lbnQiOlt7IkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTcyNTk1MTQ3Nn19LCJSZXNvdXJjZSI6Imh0dHBzOi8vY2RuLWxmcy11cy0xLmh1Z2dpbmdmYWNlLmNvL3JlcG9zL2Q5LzNkL2Q5M2QwYWU0NGUzOTMwYTVlYjI3MjEyOWM2YTEyY2NlYzgyN2UyMTljM2Q1YmE1NDc0YWU5ZGRmM2I0Yjc2NDcvYjBlMGEzYzBiOTkyOTI1ZmY5YTYwZjEyMzQ5NTBhZjBiY2M3Y2UzMDE1YzhhMzg2YTM0MjQ4OWU3NmY1ZDA5Yz9yZXNwb25zZS1jb250ZW50LWRpc3Bvc2l0aW9uPSoifV19&Signature=iwkQzEgFw2lAUuKVeX0VEy6Yk4Au-xWA-ygEA~dMq9fCEB0~dgmfMRT~R0ZFemCGx-8ux8hQQh3jQ3dmXmXCzfKpHIlspBGGn4vjO9Z4noA8iDG-2cjE~ZgEL98jZJcS3jffM3jWgIJbh4TXGxoMiJd7AHvql3YbH1RUNDnaw7O8z2SumazfjX77wu6UlIdikvhpv14GMzfq3jJs~ThHO86Vg1fYHFYkj9WYXOGcRw3XrS5wCm1qOD7aw6YRt0h6ShBLCat8DLBVeKick02DwGgGm4toZZzUCaH4XzliDBNiHAYFYMinTq7dKV1zVbcwGG9bFOw8dXd9G6-kq2YvDw__&Key-Pair-Id=K24J24Z295AEI9 (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x000002C3B2519070>: Failed to resolve 'cdn-lfs-us-1.huggingface.co' ([Errno 11001] getaddrinfo failed)"))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAGs\backend\server.py", line 25, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\generator.py", line 25, in process_rag_pipeline
    llm = create_pipeline(model_name, tokenizer)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 19, in create_pipeline
    model = load_quantized_model(model_name)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 12, in load_quantized_model
    model = AutoModelForCausalLM.from_pretrained(
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\models\auto\auto_factory.py", line 564, in from_pretrained
    return model_class.from_pretrained(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\modeling_utils.py", line 3715, in from_pretrained
    resolved_archive_file, sharded_metadata = get_checkpoint_shard_files(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\utils\hub.py", line 1079, in get_checkpoint_shard_files
    cached_filename = cached_file(
                      ^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\utils\hub.py", line 402, in cached_file
    resolved_file = hf_hub_download(
                    ^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_deprecation.py", line 101, in inner_f
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_validators.py", line 114, in _inner_fn
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1240, in hf_hub_download
    return _hf_hub_download_to_cache_dir(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1389, in _hf_hub_download_to_cache_dir
    _download_to_tmp_and_move(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1915, in _download_to_tmp_and_move
    http_get(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 566, in http_get
    return http_get(
           ^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 463, in http_get
    r = _request_wrapper(
        ^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 399, in _request_wrapper
    response = get_session().request(method=method, url=url, **params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_http.py", line 66, in send
    return super().send(request, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\adapters.py", line 519, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: (MaxRetryError('HTTPSConnectionPool(host=\'cdn-lfs-us-1.huggingface.co\', port=443): Max retries exceeded with url: /repos/d9/3d/d93d0ae44e3930a5eb272129c6a12ccec827e219c3d5ba5474ae9ddf3b4b7647/b0e0a3c0b992925ff9a60f1234950af0bcc7ce3015c8a386a342489e76f5d09c?response-content-disposition=inline%3B+filename*%3DUTF-8%27%27model-00007-of-00008.safetensors%3B+filename%3D%22model-00007-of-00008.safetensors%22%3B&Expires=1725951476&Policy=eyJTdGF0ZW1lbnQiOlt7IkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTcyNTk1MTQ3Nn19LCJSZXNvdXJjZSI6Imh0dHBzOi8vY2RuLWxmcy11cy0xLmh1Z2dpbmdmYWNlLmNvL3JlcG9zL2Q5LzNkL2Q5M2QwYWU0NGUzOTMwYTVlYjI3MjEyOWM2YTEyY2NlYzgyN2UyMTljM2Q1YmE1NDc0YWU5ZGRmM2I0Yjc2NDcvYjBlMGEzYzBiOTkyOTI1ZmY5YTYwZjEyMzQ5NTBhZjBiY2M3Y2UzMDE1YzhhMzg2YTM0MjQ4OWU3NmY1ZDA5Yz9yZXNwb25zZS1jb250ZW50LWRpc3Bvc2l0aW9uPSoifV19&Signature=iwkQzEgFw2lAUuKVeX0VEy6Yk4Au-xWA-ygEA~dMq9fCEB0~dgmfMRT~R0ZFemCGx-8ux8hQQh3jQ3dmXmXCzfKpHIlspBGGn4vjO9Z4noA8iDG-2cjE~ZgEL98jZJcS3jffM3jWgIJbh4TXGxoMiJd7AHvql3YbH1RUNDnaw7O8z2SumazfjX77wu6UlIdikvhpv14GMzfq3jJs~ThHO86Vg1fYHFYkj9WYXOGcRw3XrS5wCm1qOD7aw6YRt0h6ShBLCat8DLBVeKick02DwGgGm4toZZzUCaH4XzliDBNiHAYFYMinTq7dKV1zVbcwGG9bFOw8dXd9G6-kq2YvDw__&Key-Pair-Id=K24J24Z295AEI9 (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x000002C3B2519070>: Failed to resolve \'cdn-lfs-us-1.huggingface.co\' ([Errno 11001] getaddrinfo failed)"))'), '(Request ID: 23b1965e-b27c-4d78-bf7d-136857c23dd4)')
Received file: LSTM.pdf and query: What are LSTMs?

An error occurred while processing RAG pipeline: ('Connection broken: IncompleteRead(1057980702 bytes read, 324112426 more expected)', IncompleteRead(1057980702 bytes read, 324112426 more expected))
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 712, in _error_catcher
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 833, in _raw_read
    raise IncompleteRead(self._fp_bytes_read, self.length_remaining)
urllib3.exceptions.IncompleteRead: IncompleteRead(1057980702 bytes read, 324112426 more expected)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\models.py", line 816, in generate
    yield from self.raw.stream(chunk_size, decode_content=True)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 934, in stream
    data = self.read(amt=amt, decode_content=decode_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 905, in read
    data = self._raw_read(amt)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 811, in _raw_read
    with self._error_catcher():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 729, in _error_catcher
    raise ProtocolError(f"Connection broken: {e!r}", e) from e
urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(1057980702 bytes read, 324112426 more expected)', IncompleteRead(1057980702 bytes read, 324112426 more expected))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAGs\backend\server.py", line 25, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\generator.py", line 25, in process_rag_pipeline
    llm = create_pipeline(model_name, tokenizer)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 19, in create_pipeline
    model = load_quantized_model(model_name)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 12, in load_quantized_model
    model = AutoModelForCausalLM.from_pretrained(
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\models\auto\auto_factory.py", line 564, in from_pretrained
    return model_class.from_pretrained(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\modeling_utils.py", line 3715, in from_pretrained
    resolved_archive_file, sharded_metadata = get_checkpoint_shard_files(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\utils\hub.py", line 1079, in get_checkpoint_shard_files
    cached_filename = cached_file(
                      ^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\utils\hub.py", line 402, in cached_file
    resolved_file = hf_hub_download(
                    ^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_deprecation.py", line 101, in inner_f
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_validators.py", line 114, in _inner_fn
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1240, in hf_hub_download
    return _hf_hub_download_to_cache_dir(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1389, in _hf_hub_download_to_cache_dir
    _download_to_tmp_and_move(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1915, in _download_to_tmp_and_move
    http_get(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 549, in http_get
    for chunk in r.iter_content(chunk_size=DOWNLOAD_CHUNK_SIZE):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\models.py", line 818, in generate
    raise ChunkedEncodingError(e)
requests.exceptions.ChunkedEncodingError: ('Connection broken: IncompleteRead(1057980702 bytes read, 324112426 more expected)', IncompleteRead(1057980702 bytes read, 324112426 more expected))
Received file: LSTM.pdf and query: What are LSTMs?

An error occurred while processing RAG pipeline: `.to` is not supported for `4-bit` or `8-bit` bitsandbytes models. Please use the model as it is, since the model has already been set to the correct devices and casted to the correct `dtype`.
Traceback (most recent call last):
  File "D:\Projects\RAGs\backend\server.py", line 25, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\generator.py", line 25, in process_rag_pipeline
    llm = create_pipeline(model_name, tokenizer)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 19, in create_pipeline
    model = load_quantized_model(model_name)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\model.py", line 15, in load_quantized_model
    ).to("cuda")  # Load model on GPU
      ^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\accelerate\big_modeling.py", line 457, in wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\modeling_utils.py", line 2883, in to
    raise ValueError(
ValueError: `.to` is not supported for `4-bit` or `8-bit` bitsandbytes models. Please use the model as it is, since the model has already been set to the correct devices and casted to the correct `dtype`.
Received file: LSTM.pdf and query: What are LSTMs ?
An error occurred while processing RAG pipeline: BaseModel.__init__() takes 1 positional argument but 2 were given
Traceback (most recent call last):
  File "D:\Projects\RAGs\backend\server.py", line 25, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\generator.py", line 29, in process_rag_pipeline
    vectorstore_retriever, ensemble_retriever, bm25_retriever = setup_retrievers(docs, embedding_model_name)
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAGs\rag_pipeline\rag_hybrid\retriever.py", line 20, in setup_retrievers
    bm25_retriever = BM25Retriever(docs_content)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\load\serializable.py", line 113, in __init__
    super().__init__(*args, **kwargs)
TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given
Received file: LSTM.pdf and query: What are LSTMs ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: What are Lstms ?

Received file: LSTM.pdf and query: What are lstms?

RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: What are lstms?

RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: What are lstms?

RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: What are lstms?

Received file: LSTM.pdf and query: What are lstms?

RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: Lstms ?
An error occurred while processing RAG pipeline: ('Connection broken: IncompleteRead(609231011 bytes read, 1280356029 more expected)', IncompleteRead(609231011 bytes read, 1280356029 more expected))
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 712, in _error_catcher
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 833, in _raw_read
    raise IncompleteRead(self._fp_bytes_read, self.length_remaining)
urllib3.exceptions.IncompleteRead: IncompleteRead(609231011 bytes read, 1280356029 more expected)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\models.py", line 820, in generate
    yield from self.raw.stream(chunk_size, decode_content=True)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 934, in stream
    data = self.read(amt=amt, decode_content=decode_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 905, in read
    data = self._raw_read(amt)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 811, in _raw_read
    with self._error_catcher():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\urllib3\response.py", line 729, in _error_catcher
    raise ProtocolError(f"Connection broken: {e!r}", e) from e
urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(609231011 bytes read, 1280356029 more expected)', IncompleteRead(609231011 bytes read, 1280356029 more expected))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\rag_hybrid\generator.py", line 26, in process_rag_pipeline
    llm = create_pipeline(model_name, tokenizer)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\rag_hybrid\model.py", line 19, in create_pipeline
    model = load_quantized_model(model_name)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\rag_hybrid\model.py", line 12, in load_quantized_model
    model = AutoModelForCausalLM.from_pretrained(
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\models\auto\auto_factory.py", line 564, in from_pretrained
    return model_class.from_pretrained(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\modeling_utils.py", line 3715, in from_pretrained
    resolved_archive_file, sharded_metadata = get_checkpoint_shard_files(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\utils\hub.py", line 1079, in get_checkpoint_shard_files
    cached_filename = cached_file(
                      ^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\transformers\utils\hub.py", line 402, in cached_file
    resolved_file = hf_hub_download(
                    ^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_deprecation.py", line 101, in inner_f
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\utils\_validators.py", line 114, in _inner_fn
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1240, in hf_hub_download
    return _hf_hub_download_to_cache_dir(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1389, in _hf_hub_download_to_cache_dir
    _download_to_tmp_and_move(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 1915, in _download_to_tmp_and_move
    http_get(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\huggingface_hub\file_download.py", line 549, in http_get
    for chunk in r.iter_content(chunk_size=DOWNLOAD_CHUNK_SIZE):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\requests\models.py", line 822, in generate
    raise ChunkedEncodingError(e)
requests.exceptions.ChunkedEncodingError: ('Connection broken: IncompleteRead(609231011 bytes read, 1280356029 more expected)', IncompleteRead(609231011 bytes read, 1280356029 more expected))
Received file: LSTM.pdf and query: Lstms ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: Lstms ?
An error occurred while processing RAG pipeline: object dict can't be used in 'await' expression
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\rag_hybrid\generator.py", line 52, in process_rag_pipeline
    response4 = await evaluation(llm, embedding_model_name, docs, [normal_chain, hybrid_chain, bm25_chain] )
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\evaluator.py", line 53, in evaluation
    response = await chain.invoke(question)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: object dict can't be used in 'await' expression
Received file: LSTM.pdf and query: Lstms ?
An error occurred while processing RAG pipeline: 'RetrievalQA' object has no attribute 'get_relevant_documents'
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\rag_hybrid\generator.py", line 52, in process_rag_pipeline
    response4 = await evaluation(llm, embedding_model_name, docs, hybrid_chain )
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\evaluator.py", line 62, in evaluation
    contexts.append([docs.page_content for docs in chains.get_relevant_documents(question)])
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RetrievalQA' object has no attribute 'get_relevant_documents'
Received file: LSTM.pdf and query: lstms ?
Received file: LSTM.pdf and query: Lstms ?
Received file: LSTM.pdf and query: LSTMS ?
An error occurred while processing RAG pipeline: 'dict' object has no attribute 'dtype'
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\rag_hybrid\generator.py", line 99, in process_rag_pipeline
    result = evaluate(
             ^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\ragas\_analytics.py", line 129, in wrapper
    result = func(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\ragas\evaluation.py", line 165, in evaluate
    validate_column_dtypes(dataset)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\ragas\validation.py", line 45, in validate_column_dtypes
    if ds.features[column_names].dtype != "string":
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'dict' object has no attribute 'dtype'
Received file: LSTM.pdf and query: Lstms ?
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: Could not import 'fastembed' Python package. Please install it with `pip install fastembed`.
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\embeddings\fastembed.py", line 82, in validate_environment
    fastembed = importlib.import_module("fastembed")
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\importlib\__init__.py", line 90, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap>", line 1387, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1360, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1324, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'fastembed'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 27, in process_rag_pipeline
    embeddings = FastEmbedEmbeddings()
                 ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\pydantic\v1\main.py", line 339, in __init__
    values, fields_set, validation_error = validate_model(__pydantic_self__.__class__, data)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\pydantic\v1\main.py", line 1048, in validate_model
    input_data = validator(cls_, input_data)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\utils\pydantic.py", line 167, in wrapper
    return func(cls, values)
           ^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\embeddings\fastembed.py", line 85, in validate_environment
    raise ImportError(
ImportError: Could not import 'fastembed' Python package. Please install it with `pip install fastembed`.
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: [WinError 10061] No connection could be made because the target machine actively refused it
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 29, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [WinError 10061] No connection could be made because the target machine actively refused it
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: [WinError 10061] No connection could be made because the target machine actively refused it
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 29, in process_rag_pipeline
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [WinError 10061] No connection could be made because the target machine actively refused it
Received file: LSTM.pdf and query: LSTMs ?
An error occurred while processing RAG pipeline: [WinError 10061] No connection could be made because the target machine actively refused it
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 29, in process_rag_pipeline
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [WinError 10061] No connection could be made because the target machine actively refused it
Received file: LSTM.pdf and query: LSTMs ?
An error occurred while processing RAG pipeline: [WinError 10061] No connection could be made because the target machine actively refused it
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 33, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [WinError 10061] No connection could be made because the target machine actively refused it
Received file: LSTM.pdf and query: LSTMs ?
An error occurred while processing RAG pipeline: [Errno 11001] getaddrinfo failed
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [Errno 11001] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 33, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [Errno 11001] getaddrinfo failed
Received file: LSTM.pdf and query: LSTMs ?
An error occurred while processing RAG pipeline: [Errno 11001] getaddrinfo failed
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [Errno 11001] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 39, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [Errno 11001] getaddrinfo failed
Received file: LSTM.pdf and query: LSTMs ?
An error occurred while processing RAG pipeline: [Errno 11001] getaddrinfo failed
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [Errno 11001] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 39, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [Errno 11001] getaddrinfo failed
Received file: LSTM.pdf and query: LSTMs ?
An error occurred while processing RAG pipeline: [Errno 11001] getaddrinfo failed
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [Errno 11001] getaddrinfo failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [Errno 11001] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 39, in process_rag_pipeline
    collection_name="rag",
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [Errno 11001] getaddrinfo failed
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: The write operation timed out
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    return self._connection.handle_request(request)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 143, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 95, in handle_request
    self._send_request_body(**kwargs)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 166, in _send_request_body
    self._send_event(event, timeout=timeout)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 175, in _send_event
    self._network_stream.write(bytes_to_send, timeout=timeout)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 133, in write
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.WriteTimeout: The write operation timed out

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.WriteTimeout: The write operation timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 36, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1369, in from_texts
    qdrant.add_texts(texts, metadatas, ids, batch_size)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 192, in add_texts
    self.client.upsert(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1364, in upsert
    return self._client.upsert(
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 1766, in upsert
    http_result = self.openapi_client.points_api.upsert_points(
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\points_api.py", line 1667, in upsert_points
    return self._build_for_upsert_points(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\points_api.py", line 852, in _build_for_upsert_points
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: The write operation timed out
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: 1 validation error for ChatGroq
__root__
  Did not find groq_api_key, please add an environment variable `GROQ_API_KEY` which contains it, or pass `groq_api_key` as a named parameter. (type=value_error)
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 58, in process_rag_pipeline
    llm = ChatGroq(temperature=0, model_name="llama3-8b-8192")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\load\serializable.py", line 113, in __init__
    super().__init__(*args, **kwargs)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\pydantic\v1\main.py", line 341, in __init__
    raise validation_error
pydantic.v1.error_wrappers.ValidationError: 1 validation error for ChatGroq
__root__
  Did not find groq_api_key, please add an environment variable `GROQ_API_KEY` which contains it, or pass `groq_api_key` as a named parameter. (type=value_error)
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: 1 validation error for ChatGroq
__root__
  Did not find groq_api_key, please add an environment variable `GROQ_API_KEY` which contains it, or pass `groq_api_key` as a named parameter. (type=value_error)
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 58, in process_rag_pipeline
    llm = ChatGroq(temperature=0, model_name="llama3-8b-8192")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\load\serializable.py", line 113, in __init__
    super().__init__(*args, **kwargs)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\pydantic\v1\main.py", line 341, in __init__
    raise validation_error
pydantic.v1.error_wrappers.ValidationError: 1 validation error for ChatGroq
__root__
  Did not find groq_api_key, please add an environment variable `GROQ_API_KEY` which contains it, or pass `groq_api_key` as a named parameter. (type=value_error)
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: 'set' object has no attribute 'replace'
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 71, in process_rag_pipeline
    dense_response = qa_chain.invoke({
                     ^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 164, in invoke
    raise e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 154, in invoke
    self._call(inputs, run_manager=run_manager)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\conversational_retrieval\base.py", line 158, in _call
    docs = self._get_docs(new_question, inputs, run_manager=_run_manager)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\conversational_retrieval\base.py", line 395, in _get_docs
    docs = self.retriever.invoke(
           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\retrievers.py", line 253, in invoke
    raise e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\retrievers.py", line 246, in invoke
    result = self._get_relevant_documents(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 1042, in _get_relevant_documents
    docs = self.vectorstore.similarity_search(query, **self.search_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 288, in similarity_search
    results = self.similarity_search_with_score(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 365, in similarity_search_with_score
    self._embed_query(query),
    ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 2065, in _embed_query
    embedding = self.embeddings.embed_query(query)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_huggingface\embeddings\huggingface.py", line 102, in embed_query
    return self.embed_documents([text])[0]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_huggingface\embeddings\huggingface.py", line 81, in embed_documents
    texts = list(map(lambda x: x.replace("\n", " "), texts))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_huggingface\embeddings\huggingface.py", line 81, in <lambda>
    texts = list(map(lambda x: x.replace("\n", " "), texts))
                               ^^^^^^^^^
AttributeError: 'set' object has no attribute 'replace'
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: 'list' object has no attribute 'replace'
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 71, in process_rag_pipeline
    dense_response = qa_chain.invoke({
                     ^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 164, in invoke
    raise e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 154, in invoke
    self._call(inputs, run_manager=run_manager)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\conversational_retrieval\base.py", line 158, in _call
    docs = self._get_docs(new_question, inputs, run_manager=_run_manager)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\conversational_retrieval\base.py", line 395, in _get_docs
    docs = self.retriever.invoke(
           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\retrievers.py", line 253, in invoke
    raise e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\retrievers.py", line 246, in invoke
    result = self._get_relevant_documents(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 1042, in _get_relevant_documents
    docs = self.vectorstore.similarity_search(query, **self.search_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 288, in similarity_search
    results = self.similarity_search_with_score(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 365, in similarity_search_with_score
    self._embed_query(query),
    ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 2065, in _embed_query
    embedding = self.embeddings.embed_query(query)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_huggingface\embeddings\huggingface.py", line 102, in embed_query
    return self.embed_documents([text])[0]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_huggingface\embeddings\huggingface.py", line 81, in embed_documents
    texts = list(map(lambda x: x.replace("\n", " "), texts))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_huggingface\embeddings\huggingface.py", line 81, in <lambda>
    texts = list(map(lambda x: x.replace("\n", " "), texts))
                               ^^^^^^^^^
AttributeError: 'list' object has no attribute 'replace'
Received file: LSTM.pdf and query: lstms ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: long-Short Term Memory ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: long-Short Term Memory ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: long-Short Term Memory ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: long-Short Term Memory ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: long-Short Term Memory ?
An error occurred while processing RAG pipeline: 'Qdrant' object is not iterable
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 39, in process_rag_pipeline
    for doc in vectorstore:
TypeError: 'Qdrant' object is not iterable
Received file: LSTM.pdf and query: long-Short Term Memory ?
An error occurred while processing RAG pipeline: Unexpected Response: 403 (Forbidden)
Raw response content:
b'{"error":"forbidden"}'
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 102, in send
    raise UnexpectedResponse.for_response(response)
qdrant_client.http.exceptions.UnexpectedResponse: Unexpected Response: 403 (Forbidden)
Raw response content:
b'{"error":"forbidden"}'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 34, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1732, in construct_instance
    client.recreate_collection(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 2190, in recreate_collection
    return self._client.recreate_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2674, in recreate_collection
    self.delete_collection(collection_name, timeout=timeout)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2542, in delete_collection
    result: Optional[bool] = self.http.collections_api.delete_collection(
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1241, in delete_collection
    return self._build_for_delete_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 259, in _build_for_delete_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 102, in send
    raise UnexpectedResponse.for_response(response)
qdrant_client.http.exceptions.UnexpectedResponse: Unexpected Response: 403 (Forbidden)
Raw response content:
b'{"error":"forbidden"}'
Received file: LSTM.pdf and query: long-Short Term Memory ?
An error occurred while processing RAG pipeline: The write operation timed out
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    return self._connection.handle_request(request)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 143, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 95, in handle_request
    self._send_request_body(**kwargs)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 166, in _send_request_body
    self._send_event(event, timeout=timeout)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 175, in _send_event
    self._network_stream.write(bytes_to_send, timeout=timeout)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 133, in write
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.WriteTimeout: The write operation timed out

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.WriteTimeout: The write operation timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 36, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1369, in from_texts
    qdrant.add_texts(texts, metadatas, ids, batch_size)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 192, in add_texts
    self.client.upsert(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1364, in upsert
    return self._client.upsert(
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 1766, in upsert
    http_result = self.openapi_client.points_api.upsert_points(
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\points_api.py", line 1667, in upsert_points
    return self._build_for_upsert_points(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\points_api.py", line 852, in _build_for_upsert_points
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: The write operation timed out
Received file: LSTM.pdf and query: long-Short Term Memory ?
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: The write operation timed out
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    return self._connection.handle_request(request)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 143, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 95, in handle_request
    self._send_request_body(**kwargs)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 166, in _send_request_body
    self._send_event(event, timeout=timeout)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\http11.py", line 175, in _send_event
    self._network_stream.write(bytes_to_send, timeout=timeout)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 133, in write
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.WriteTimeout: The write operation timed out

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.WriteTimeout: The write operation timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 36, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1369, in from_texts
    qdrant.add_texts(texts, metadatas, ids, batch_size)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 192, in add_texts
    self.client.upsert(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1364, in upsert
    return self._client.upsert(
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 1766, in upsert
    http_result = self.openapi_client.points_api.upsert_points(
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\points_api.py", line 1667, in upsert_points
    return self._build_for_upsert_points(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\points_api.py", line 852, in _build_for_upsert_points
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: The write operation timed out
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: [WinError 10061] No connection could be made because the target machine actively refused it
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 36, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [WinError 10061] No connection could be made because the target machine actively refused it
Received file: LSTM.pdf and query: lstms ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: How can  recurrent networks  use their feedback connections ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: How can  recurrent networks  use their feedback connections ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: What are long short-term memory (LSTM) ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: What are long short-term memory (LSTM) ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: Lstms ?
An error occurred while processing RAG pipeline: [WinError 10061] No connection could be made because the target machine actively refused it
Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 72, in map_httpcore_exceptions
    yield
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 236, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 216, in handle_request
    raise exc from None
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection_pool.py", line 196, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 99, in handle_request
    raise exc
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 76, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_sync\connection.py", line 122, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_backends\sync.py", line 205, in connect_tcp
    with map_exceptions(exc_map):
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 106, in send_inner
    response = self._client.send(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 926, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 954, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 991, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_client.py", line 1027, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 235, in handle_request
    with map_httpcore_exceptions():
  File "C:\Users\harsh\miniconda3\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\httpx\_transports\default.py", line 89, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 37, in process_rag_pipeline
    vectorstore = Qdrant.from_documents(documents=documents,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1665, in construct_instance
    collection_info = client.get_collection(collection_name=collection_name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 1944, in get_collection
    return self._client.get_collection(collection_name=collection_name, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 2436, in get_collection
    result: Optional[types.CollectionInfo] = self.http.collections_api.get_collection(
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 1314, in get_collection
    return self._build_for_get_collection(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api\collections_api.py", line 397, in _build_for_get_collection
    return self.api_client.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 79, in request
    return self.send(request, type_)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 96, in send
    response = self.middleware(request, self.send_inner)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 205, in __call__
    return call_next(request)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\http\api_client.py", line 108, in send_inner
    raise ResponseHandlingException(e)
qdrant_client.http.exceptions.ResponseHandlingException: [WinError 10061] No connection could be made because the target machine actively refused it
Received file: LSTM.pdf and query: Lstms ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: Lstms ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: What are Lstms ? How do they retain long term dependencies ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: What are Lstms ? How do they retain long term dependencies ?
An error occurred while processing RAG pipeline: Error code: 503 - {'error': {'message': 'Service Unavailable', 'type': 'internal_server_error'}}
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 24, in ragas_endpoint
    result = await process_rag_pipeline(temp_file_path, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\generator.py", line 74, in process_rag_pipeline
    dense_response = qa_chain.invoke({
                     ^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 164, in invoke
    raise e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 154, in invoke
    self._call(inputs, run_manager=run_manager)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\conversational_retrieval\base.py", line 169, in _call
    answer = self.combine_docs_chain.run(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\_api\deprecation.py", line 180, in warning_emitting_wrapper
    return wrapped(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 603, in run
    return self(kwargs, callbacks=callbacks, tags=tags, metadata=metadata)[
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\_api\deprecation.py", line 180, in warning_emitting_wrapper
    return wrapped(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 381, in __call__
    return self.invoke(
           ^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 164, in invoke
    raise e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\base.py", line 154, in invoke
    self._call(inputs, run_manager=run_manager)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\combine_documents\base.py", line 138, in _call
    output, extra_return_dict = self.combine_docs(
                                ^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\combine_documents\map_reduce.py", line 226, in combine_docs
    map_results = self.llm_chain.apply(
                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\llm.py", line 250, in apply
    raise e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\llm.py", line 247, in apply
    response = self.generate(input_list, run_manager=run_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain\chains\llm.py", line 138, in generate
    return self.llm.generate_prompt(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\language_models\chat_models.py", line 777, in generate_prompt
    return self.generate(prompt_messages, stop=stop, callbacks=callbacks, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\language_models\chat_models.py", line 634, in generate
    raise e
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\language_models\chat_models.py", line 624, in generate
    self._generate_with_cache(
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\language_models\chat_models.py", line 846, in _generate_with_cache
    result = self._generate(
             ^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_groq\chat_models.py", line 472, in _generate
    response = self.client.create(messages=message_dicts, **params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\groq\resources\chat\completions.py", line 287, in create
    return self._post(
           ^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\groq\_base_client.py", line 1244, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\groq\_base_client.py", line 936, in request
    return self._request(
           ^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\groq\_base_client.py", line 1039, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.InternalServerError: Error code: 503 - {'error': {'message': 'Service Unavailable', 'type': 'internal_server_error'}}
Received file: LSTM.pdf and query: What are Lstms ? How do they retain long term dependencies ?
RAG pipeline processing completed successfully.
Received file: LSTM.pdf and query: Lstms ?
An error occurred while processing RAG pipeline: `host` param is not expected to contain protocol (http:// or https://). Try to use `url` parameter instead.
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 25, in ragas_endpoint
    retrievers = await process_retrievers(temp_file_path, query)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\retriever.py", line 55, in process_retrievers
    vectorstore = await create_vectorstore(documents, url)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\retriever.py", line 20, in create_vectorstore
    client = QdrantClient(host=url)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 134, in __init__
    self._client = QdrantRemote(
                   ^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 79, in __init__
    raise ValueError(
ValueError: `host` param is not expected to contain protocol (http:// or https://). Try to use `url` parameter instead.
Received file: LSTM.pdf and query: Lstms ?
An error occurred while processing RAG pipeline: `host` param is not expected to contain protocol (http:// or https://). Try to use `url` parameter instead.
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 25, in ragas_endpoint
    retrievers = await process_retrievers(temp_file_path, query)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\retriever.py", line 55, in process_retrievers
    vectorstore = await create_vectorstore(documents, url)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\retriever.py", line 20, in create_vectorstore
    client = QdrantClient(url=url)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 134, in __init__
    self._client = QdrantRemote(
                   ^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_remote.py", line 79, in __init__
    raise ValueError(
ValueError: `host` param is not expected to contain protocol (http:// or https://). Try to use `url` parameter instead.
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: cannot pickle '_thread.RLock' object
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 25, in ragas_endpoint
    retrievers = await process_retrievers(temp_file_path, query)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\retriever.py", line 55, in process_retrievers
    vectorstore = await create_vectorstore(documents, url)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\retriever.py", line 23, in create_vectorstore
    vectorstore = Qdrant.from_documents(
                  ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 835, in from_documents
    return cls.from_texts(texts, embedding, metadatas=metadatas, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1337, in from_texts
    qdrant = cls.construct_instance(
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 1643, in construct_instance
    client, async_client = cls._generate_clients(
                           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_community\vectorstores\qdrant.py", line 2248, in _generate_clients
    sync_client = QdrantClient(
                  ^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\qdrant_client\qdrant_client.py", line 112, in __init__
    self._init_options.update(deepcopy(kwargs))
                              ^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 136, in deepcopy
    y = copier(x, memo)
        ^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 221, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
                             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 162, in deepcopy
    y = _reconstruct(x, memo, *rv)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 259, in _reconstruct
    state = deepcopy(state, memo)
            ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 136, in deepcopy
    y = copier(x, memo)
        ^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 221, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
                             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 162, in deepcopy
    y = _reconstruct(x, memo, *rv)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 259, in _reconstruct
    state = deepcopy(state, memo)
            ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 136, in deepcopy
    y = copier(x, memo)
        ^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 221, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
                             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 162, in deepcopy
    y = _reconstruct(x, memo, *rv)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 259, in _reconstruct
    state = deepcopy(state, memo)
            ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 136, in deepcopy
    y = copier(x, memo)
        ^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 221, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
                             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 162, in deepcopy
    y = _reconstruct(x, memo, *rv)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 259, in _reconstruct
    state = deepcopy(state, memo)
            ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 136, in deepcopy
    y = copier(x, memo)
        ^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 221, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
                             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 162, in deepcopy
    y = _reconstruct(x, memo, *rv)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 259, in _reconstruct
    state = deepcopy(state, memo)
            ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 136, in deepcopy
    y = copier(x, memo)
        ^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 221, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
                             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 162, in deepcopy
    y = _reconstruct(x, memo, *rv)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 259, in _reconstruct
    state = deepcopy(state, memo)
            ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 136, in deepcopy
    y = copier(x, memo)
        ^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 221, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
                             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 162, in deepcopy
    y = _reconstruct(x, memo, *rv)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 259, in _reconstruct
    state = deepcopy(state, memo)
            ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 136, in deepcopy
    y = copier(x, memo)
        ^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 221, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
                             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\copy.py", line 151, in deepcopy
    rv = reductor(4)
         ^^^^^^^^^^^
TypeError: cannot pickle '_thread.RLock' object
Received file: LSTM.pdf and query: lstms ?
An error occurred while processing RAG pipeline: 1 validation error for VectorStoreRetriever
__root__
  search_type of bm25 not allowed. Valid values are: ('similarity', 'similarity_score_threshold', 'mmr') (type=value_error)
Traceback (most recent call last):
  File "D:\Projects\RAG\backend\server.py", line 25, in ragas_endpoint
    retrievers = await process_retrievers(temp_file_path, query)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\retriever.py", line 55, in process_retrievers
    sparse_retriever = await create_sparse_retriever(vectorstore)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Projects\RAG\rag_pipeline\Qdrant_hybrid_rag\retriever.py", line 36, in create_sparse_retriever
    sparse_retriever = vectorstore.as_retriever(search_type="bm25", search_kwargs={"k": 7})
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\vectorstores\base.py", line 969, in as_retriever
    return VectorStoreRetriever(vectorstore=self, tags=tags, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\harsh\miniconda3\Lib\site-packages\langchain_core\load\serializable.py", line 113, in __init__
    super().__init__(*args, **kwargs)
  File "C:\Users\harsh\miniconda3\Lib\site-packages\pydantic\v1\main.py", line 341, in __init__
    raise validation_error
pydantic.v1.error_wrappers.ValidationError: 1 validation error for VectorStoreRetriever
__root__
  search_type of bm25 not allowed. Valid values are: ('similarity', 'similarity_score_threshold', 'mmr') (type=value_error)
